name: CI/CD Pipeline with Docker Compose

on:
  push:
    branches: [ main, branch-dev ]
  pull_request:
    branches: [ main, branch-dev ]

permissions:
  contents: write
  releases: write

env:
  DOCKER_IMAGE: carlinhoshk/escola-app
  DOCKER_TAG: ${{ github.sha }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    environment: Dockerhub-cred

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: jar-main
          path: target/*.jar

      - name: Criar Release no GitHub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          target_commitish: main
          name: Release ${{ github.run_number }}
          body: |
            - Release autom√°tica gerada pelo CI.
            - Commit: ${{ github.sha }}
          draft: false
          prerelease: false
          files: target/*.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build \
            -t ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} \
            -t ${{ env.DOCKER_IMAGE }}:latest .

      - name: Start services with Docker Compose
        uses: hoverkraft-tech/compose-action@v2.0.1
        with:
          compose-file: "./docker/docker-compose.yml"
          up-flags: "--build -d"
          down-flags: "--volumes"
      
      - name: Run Integration Tests
        run: mvn verify

      - name: Push Docker image
        if: success()
        run: |
          docker push ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          docker push ${{ env.DOCKER_IMAGE }}:latest
